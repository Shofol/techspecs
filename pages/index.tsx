import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import Navbar from '../components/Navbar'
import Footer from '../components/Footer'
import Brands from '../components/Brands/Brands'
import clientPromise from '../lib/mongodb'

const inter = Inter({ subsets: ['latin'] })

export default function Home(props: any) {
  // console.log(props)

  // const test = async () => {
  //   let res = await fetch("http://localhost:3000/api/hello?pageNumber=0", {
  //     method: "GET",
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //   });
  //   let allPosts = await res.json();
  //   console.log(allPosts)
  // }

  // test();
  return (
    <>
      <Head>
        <title>TechSpecs</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#ffffff"></meta>
      </Head>
      <main className='min-h-screen flex flex-col justify-between bg-light-gray'>
        <Navbar />
        <Brands products={props.products} totalCount={props.totalCount} />
        <Footer />
      </main>
    </>
  )
}


export async function getServerSideProps() {
  try {
    const client = await clientPromise;
    const db = client.db("v4");

    const products = await db.collection("Product").aggregate([
      { $group: { _id: "$Product.Brand", count: { $sum: 1 } }, },
      { $sort: { _id: 1 } }
    ])
      .toArray();
    // .find({})
    // // .project({ Product: 1 })
    // // .limit(20)
    // .toArray();
    const totalCount = await db.collection("Product").countDocuments({});

    return {
      props: { products: JSON.parse(JSON.stringify(products)), totalCount },
    };
  } catch (e) {
    console.error(e);
  }
}